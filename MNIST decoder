" " " 
1. download the MNIST data set (if not already downloaded)
2. implementing a feed forward neural network classifier using pytroch
3. Train the classifier on the MNIST data to predict digit classes
4. Test the acuracy of the classifier  
" " " 

#----------------------------------------------------------------------
# import modules 
#----------------------------------------------------------------------
import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import Dataset, DataLoader
import time

#----------------------------------------------------------------------
# Data Transforms 
#----------------------------------------------------------------------
transform = transforms.ToTensor()

#----------------------------------------------------------------------
# train and test datasets
#----------------------------------------------------------------------
train_dataset = datasets.MNIST(root='data', 
                               train=True, 
                               transform=transform,
                               download=True)

test_dataset = datasets.MNIST(root='data', 
                              train=False, 
                              transform=transform)

#----------------------------------------------------------------------
# Dataloader 
#----------------------------------------------------------------------
train_loader = DataLoader(dataset=train_dataset, 
                          batch_size=100, 
                          shuffle=True)

test_loader = DataLoader(dataset=test_dataset, 
                         batch_size=100, 
                         shuffle=False)

#----------------------------------------------------------------------
# model architecture
#----------------------------------------------------------------------
input_size = 784        # MNIST images are 28x28 pixels
num_classes = 10        # ten possible digits

model = nn.Sequential(nn.Linear(input_size, 500),
                      nn.ReLU(),
                      nn.Linear(500, 100),
                      nn.ReLU(),
                      nn.Linear(100, 10),
                      nn.LogSoftmax(dim=1))

#----------------------------------------------------------------------
# loss function and optimizer 
#----------------------------------------------------------------------
criterion = nn.NLLLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.5)

#----------------------------------------------------------------------
# training and testing functions
#----------------------------------------------------------------------

def train(model, criterion, optimizer, num_epochs=10):
    """
    This function takes a feed forward neural network model, 
    a criterion function, an optimizer function, 
    and a number of epochs to train the model. 
    The data is a MNIST data set.
    """
    train_losses = []
    test_losses = []
    test_accuracy = []

    for epoch in range(1, num_epochs+1):
        model.train()
        running_loss = 0
        for images, labels in train_loader:
            optimizer.zero_grad()
            log_ps = model(images)
            loss = criterion(log_ps, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        else:
            test_loss = 0
            accuracy=0
            model.eval()
            with torch.no_grad():
                for images, labels in test_loader:
                    log_ps = model(images)
                    test_loss += criterion(log_ps, labels)
                    ps = torch.exp(log_ps)
                    top_p, top_class = ps.topk(1, dim=1)
                    equals = top_class == labels.view(*top_class.shape)
                    accuracy += torch.mean(equals.type(torch.FloatTensor))
        train_losses.append(running_loss/len(train_loader))
        test_losses.append(test_loss/len(test_loader))
        test_accuracy.append(accuracy/len(test_loader))
        print("Epoch: {}/{}.. ".format(epoch, num_epochs),
              "Training Loss: {:.3f}.. ".format(running_loss/len(train_loader)),
              "Test Loss: {:.3f}.. ".format(test_loss/len(test_loader)),
              "Test Accuracy: {:.3f}".format(accuracy/len(test_loader)))
        
    return model, train_losses, test_losses, test_accuracy

start_time = time.time()
model, train_losses, test_losses, test_accuracy = train(model, criterion, optimizer)
end_time = time.time()
print("--- total training time: %s seconds ---" %
